(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{197:function(t,s,a){},218:function(t,s,a){"use strict";a(197)},244:function(t,s,a){"use strict";a.r(s);a(218);var _=a(0),o=Object(_.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"浏览器高频面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器高频面试题"}},[t._v("#")]),t._v(" 浏览器高频面试题")]),t._v(" "),a("h2",{attrs:{id:"_1-什么是进程和线程？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是进程和线程？"}},[t._v("#")]),t._v(" 1. 什么是进程和线程？")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("进程")]),t._v(" "),a("p",[t._v("一个进程就是一个程序的运行实例。详细解释就是，启动一个程序的时候，操作系统会为该程序创建一个内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫做进程。")])]),t._v(" "),a("h2",{attrs:{id:"_2-进程和线程的关系？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-进程和线程的关系？"}},[t._v("#")]),t._v(" 2. 进程和线程的关系？")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("关系")]),t._v(" "),a("ol",[a("li",[t._v("进程中任意一个线程执行出错，都会导致整个进程出错。")]),t._v(" "),a("li",[t._v("线程之中共享进程中的数据。")]),t._v(" "),a("li",[t._v("当一个进程关闭后，操作系统会回收进程所占用的内存。")]),t._v(" "),a("li",[t._v("进程中的内容相互隔离。")])])]),t._v(" "),a("h2",{attrs:{id:"_3-什么是单进程浏览器以及优缺点？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么是单进程浏览器以及优缺点？"}},[t._v("#")]),t._v(" 3. 什么是单进程浏览器以及优缺点？")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("概念")]),t._v(" "),a("p",[t._v("单进程浏览器：单进程浏览器是指浏览器的所有功能模块都运行在同一个进程里。"),a("br"),t._v("\n缺点：不稳定、不流畅、不安全")])]),t._v(" "),a("h2",{attrs:{id:"_4-什么是-tcp-和-udp？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是-tcp-和-udp？"}},[t._v("#")]),t._v(" 4. 什么是 TCP 和 UDP？")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("概念")]),t._v(" "),a("p",[t._v("TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。"),a("br"),t._v("\nUDP是用户数据包协议（User Datagram Protocol）， 通过端口号把数据包分发给正确的程序。")])]),t._v(" "),a("h2",{attrs:{id:"_5-如何保证数据传输中的完整性？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-如何保证数据传输中的完整性？"}},[t._v("#")]),t._v(" 5. 如何保证数据传输中的完整性？")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("概念")]),t._v(" "),a("p",[t._v("互联网中的数据是通过数据包来传输的，数据包在传输过程中容易丢失或出错。")]),t._v(" "),a("ol",[a("li",[t._v("IP 负责把数据包送达目的主机。")]),t._v(" "),a("li",[t._v("UDP（用户数据包协议）负责把数据包送达具体应用。")]),t._v(" "),a("li",[t._v("TCP（传输控制协议） 保证了数据完整地传输，它的连接可分为三个阶段：建立连接、传输数据和断开连接。")])])]),t._v(" "),a("h2",{attrs:{id:"_6-什么是http？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-什么是http？"}},[t._v("#")]),t._v(" 6. 什么是HTTP？")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("概念")]),t._v(" "),a("p",[t._v("HTTP 是一种允许浏览器向服务器获取资源的协议，通常由浏览器发起请求，用来获取不同类型的文件，例如 HTML 文件、CSS 文件、JavaScript 文件、图片、视频等。")])]),t._v(" "),a("h2",{attrs:{id:"_7-http-请求从发起到结束经历哪些阶段？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-http-请求从发起到结束经历哪些阶段？"}},[t._v("#")]),t._v(" 7. HTTP 请求从发起到结束经历哪些阶段？")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("概念")]),t._v(" "),a("p",[t._v("八大阶段：构建请求、查找缓存、准备 IP 和端口、等待 TCP 队列、建立 TCP 连接、发起 HTTP 请求、服务器处理请求、服务器返回请求和断开连接。")])]),t._v(" "),a("h2",{attrs:{id:"_8-什么是浏览器缓存？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-什么是浏览器缓存？"}},[t._v("#")]),t._v(" 8. 什么是浏览器缓存？")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("概念")]),t._v(" "),a("p",[t._v("浏览器缓存是一种在"),a("strong",[t._v("本地保存资源副本")]),t._v("，以供下次请求时直接使用的技术")])]),t._v(" "),a("h2",{attrs:{id:"_9-什么是-dns？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-什么是-dns？"}},[t._v("#")]),t._v(" 9. 什么是 DNS？")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("概念")]),t._v(" "),a("p",[t._v("DNS 是域名系统，将域名映射成 IP 的系统")])]),t._v(" "),a("h2",{attrs:{id:"_10-登陆状态是如何保持的？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-登陆状态是如何保持的？"}},[t._v("#")]),t._v(" 10. 登陆状态是如何保持的？")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("步骤")]),t._v(" "),a("ol",[a("li",[t._v("用户打开登录页面，在登录框里填入用户名和密码，点击确定按钮。点击按钮会触发页面脚本生成用户登录信息，然后调用 POST 方法提交用户登录信息给服务器。")]),t._v(" "),a("li",[t._v("服务器接收到浏览器提交的信息之后，查询后台，验证用户登录信息是否正确，如果正确的话，会生成一段表示用户身份的字符串，并把该字符串写到响应头的 Set-Cookie 字段里，如下所示，然后把响应头发送给浏览器。")]),t._v(" "),a("li",[t._v("浏览器在接收到服务器的响应头后，开始解析响应头，如果遇到响应头里含有 Set-Cookie 字段的情况，浏览器就会把这个字段信息保存到本地。比如把UID=3431uad保持到本地。")]),t._v(" "),a("li",[t._v("当用户再次访问时，浏览器会发起 HTTP 请求，但在发起请求之前，浏览器会读取之前保存的 Cookie 数据，并把数据写进请求头里的 Cookie 字段里（如下所示），然后浏览器再将请求头发送给服务器。")]),t._v(" "),a("li",[t._v("服务器在收到 HTTP 请求头数据之后，就会查找请求头里面的“Cookie”字段信息，当查找到包含UID=3431uad的信息时，服务器查询后台，并判断该用户是已登录状态，然后生成含有该用户信息的页面数据，并把生成的数据发送给浏览器。")]),t._v(" "),a("li",[t._v("浏览器在接收到该含有当前用户的页面数据后，就可以正确展示用户登录的状态信息了。")])])]),t._v(" "),a("h2",{attrs:{id:"_11-chrome仅仅打开了1个页面，为什么有4个进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-chrome仅仅打开了1个页面，为什么有4个进程"}},[t._v("#")]),t._v(" 11. chrome仅仅打开了1个页面，为什么有4个进程?")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("进程")]),t._v(" "),a("p",[t._v("1.浏览器进程、2.网络进程、3.渲染进程、4.GPU进程、5.插件进程（不是必须的）")])]),t._v(" "),a("h2",{attrs:{id:"_12-cookie、localstorage、sessionstorage的异同点？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-cookie、localstorage、sessionstorage的异同点？"}},[t._v("#")]),t._v(" 12. cookie、localStorage、sessionStorage的异同点？")]),t._v(" "),a("h3",{attrs:{id:"_1-为什么会出现-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么会出现-cookie"}},[t._v("#")]),t._v(" 1. 为什么会出现 cookie?")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("概念")]),t._v(" "),a("p",[t._v("Cookie 本身并不是为了解决「在浏览器上存东西」而被发明，它的出现是为了解决 HTTP 协议无状态特性的问题简单来说就是：用户的两次 HTTP 请求，服务端并不能通过请求本身，知道这两次请求，来自于同一个用户。")])]),t._v(" "),a("h3",{attrs:{id:"_2-cookie-的安全问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-cookie-的安全问题"}},[t._v("#")]),t._v(" 2. Cookie 的安全问题?")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("概念")]),t._v(" "),a("p",[t._v("Cookie 在每次请求中都会被发送，如果不使用 HTTPS 并对其加密，其保存的信息很容易被窃取，导致安全风险"),a("br"),t._v("\nCookie 每次请求自动发送的特性还会导致 CSRF 攻击的安全风险")])]),t._v(" "),a("h3",{attrs:{id:"_3-cookie-的两个特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-cookie-的两个特性"}},[t._v("#")]),t._v(" 3. Cookie 的两个特性")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("特性")]),t._v(" "),a("ol",[a("li",[t._v("Cookie 可以被服务器设置")]),t._v(" "),a("li",[t._v("浏览器每次请求会自动带上 Cookie\n设置属性 HttpOnly 则用来禁止使用 JS 访问 cookie，这样最大的好处是避免了 XSS 攻击")])])]),t._v(" "),a("h3",{attrs:{id:"_4-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-cookie"}},[t._v("#")]),t._v(" 4. Cookie")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("特点")]),t._v(" "),a("ol",[a("li",[t._v("可设置失效时间，没有设置的话，默认是关闭浏览器后失效")]),t._v(" "),a("li",[t._v("存放数据大小：cookie：4KB左右")]),t._v(" "),a("li",[t._v("每次都会携带在HTTP头中，如果使用 cookie 保存过多数据会带来性能问题")]),t._v(" "),a("li",[t._v("需要程序员自己封装，原生的 Cookie 接口不友好")])])]),t._v(" "),a("h3",{attrs:{id:"_5-localstorage-sessionstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-localstorage-sessionstorage"}},[t._v("#")]),t._v(" 5. localStorage / sessionStorage")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ol",[a("li",[t._v("localStorage: 除非被手动清除，否则将会永久保存。")]),t._v(" "),a("li",[t._v("sessionStorage:  只在当前网页下有效，关闭页面或浏览器后就会被清除。")]),t._v(" "),a("li",[t._v("都可以保存5MB的信息。")]),t._v(" "),a("li",[t._v("都仅在客户端（即浏览器）中保存，不参与和服务器的通信")]),t._v(" "),a("li",[t._v("都是原生接口可以接受，亦可再次封装来对 Object 和 Array 有更好的支持")])])]),t._v(" "),a("h2",{attrs:{id:"_13-跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-跨域"}},[t._v("#")]),t._v(" 13. 跨域")]),t._v(" "),a("h3",{attrs:{id:"_1-跨域通信有哪些方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-跨域通信有哪些方式"}},[t._v("#")]),t._v(" 1. 跨域通信有哪些方式")]),t._v(" "),a("h3",{attrs:{id:"_2-表单可以跨域吗？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-表单可以跨域吗？"}},[t._v("#")]),t._v(" 2. 表单可以跨域吗？")])])}],!1,null,null,null);s.default=o.exports}}]);